/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#define HM_TAPPING_TERM 150
#define HM_TAPPING_TERM_FAST 120
#define HM_PRIOR_IDLE 100

/ {
    combos {
        compatible = "zmk,combos";

        rcmd_combo {
            bindings = <&kp RIGHT_COMMAND>;
            key-positions = <21 22>;
            layers = <0>;
        };

        rctrl_combo {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <21 20>;
            layers = <0>;
        };

        rshift_combo {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <19 20>;
            layers = <0>;
        };

        ralt_combo {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <18 19>;
            layers = <0>;
        };

        lcmd_combo {
            bindings = <&kp LEFT_COMMAND>;
            key-positions = <13 14>;
            layers = <0>;
        };

        lctrl_combo {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <14 15>;
            layers = <0>;
        };

        lshift_combo {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <15 16>;
            layers = <0>;
        };

        lalt_combo {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 17>;
            layers = <0>;
        };

        lctrl_alt_combo {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <16 14 15>;
            layers = <0>;
        };

        lcmd_shift_combo {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <14 15 13>;
            layers = <0>;
        };

        rcmd_shift_combo {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <20 21 22>;
            layers = <0>;
        };
    };

    macros {
        macro_00: macro_00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0>;
            label = "MACRO_00";
        };

        macro_000: macro_000 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0>;
            label = "MACRO_000";
        };

        macro_gprev: macro_gprev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp G>;
            label = "MACRO_GPREV";
        };

        macro_gnext: macro_gnext {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp G>;
            label = "MACRO_GNEXT";
        };
    };

    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_SHIFT>, <&kt LEFT_SHIFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // | NONE |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | NONE |
            // | NONE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | NONE |
            // | NONE |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | NONE |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E         &kp R            &kp T           &kp Y      &kp U        &kp I        &kp O    &kp P     &none
&none  &hm_l LEFT_CONTROL A  &hm_l LEFT_ALT S  &hm_l LEFT_GUI D  &hm_shift_l LEFT_SHIFT F      &kp G               &kp H     &hm_shift_r RIGHT_SHIFT J   &hm_r RIGHT_GUI K  &hm_r RIGHT_ALT L &hm_r RIGHT_CONTROL SEMI &none
&none  &kp Z  &kp X  &kp C         &kp V            &kp B           &kp N      &kp M        &kp COMMA    &kp DOT  &kp FSLH  &none
                     &lt 4 ESC  &lt 2 SPACE  &lt 1 TAB    &lt 3 ENTER  &lt 5 BACKSPACE  &smart_shift
            >;

            label = "base";
        };

        num {
            bindings = <
&trans  &kp N1     &kp N2      &kp N3  &kp N4   &kp N5    &trans  &kp N7     &kp N8     &kp N9    &trans    &trans
&trans  &kp N6     &kp N7      &kp N8  &kp N9   &kp N0    &trans  &kp N4     &kp N5     &kp N6    &kp LGUI  &trans
&trans  &macro_00  &macro_000  &trans  &trans   &trans    &trans  &kp N1     &kp N2     &kp N3    &trans    &trans
                               &trans  &kp DEL  &trans    &trans  &kp N0     &trans
            >;

            label = "num";
        };

        sym {
            bindings = <
&trans  &kp EXCLAMATION &kp AT_SIGN      &kp POUND     &kp DOLLAR         &kp PERCENT      &kp MINUS        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &kp SQT  &trans
&trans  &kp CARET       &kp AMPERSAND    &kp ASTERISK  &kp UNDERSCORE     &kp PLUS         &kp EQUAL        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans  &kp DQT  &trans
&trans  &kp GRAVE       &kp TILDE        &kp PIPE2     &trans             &trans           &trans           &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans  &trans
                                         &trans        &kp DELETE         &trans           &trans           &trans                &trans
            >;

            label = "sym";
        };

        media {
            bindings = <
&trans  &trans         &trans         &trans         &trans         &trans            &trans                &trans                &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &trans
&trans  &trans         &trans         &trans         &trans         &bt BT_CLR        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_MUTE      &kp C_VOL_DN      &kp C_VOLUME_UP  &trans
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_CLR_ALL    &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2    &bt BT_SEL 3      &out OUT_TOG     &trans
                                      &trans         &trans         &trans            &trans                &trans                &trans
            >;

            label = "media";
        };

        func {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3      &kp F4       &kp F5     &trans  &trans          &trans        &trans            &trans        &trans
&trans  &kp F6   &kp F7   &kp F8      &kp F9       &kp F10    &trans  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &trans
&trans  &kp F11  &kp F12  &kp K_COPY  &kp K_PASTE  &trans     &trans  &trans          &trans        &trans            &trans        &trans
                          &trans      &trans       &trans     &trans  &trans          &trans
            >;

            label = "func";
        };

        nav {
            bindings = <
&trans  &trans    &trans     &trans    &trans     &trans    &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)  &trans
&trans  &kp LGUI  &kp LCTRL  &kp LALT  &kp LSHFT  &trans    &kp LEFT          &kp DOWN          &kp UP            &kp RIGHT         &kp MINUS   &trans
&trans  &trans    &trans     &trans    &trans     &trans    &kp PAGE_DOWN     &kp PAGE_UP       &macro_gprev      &macro_gnext      &kp PIPE    &trans
                             &trans    &trans     &trans    &kp LC(A)         &kp LG(SPACE)     &kp LG(ENTER)
            >;

            label = "nav";
        };
    };
};
